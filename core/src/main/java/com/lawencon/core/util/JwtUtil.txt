V1
@Component
public class JwtUtil {
	
	private final KeyPair key = Keys.keyPairFor(SignatureAlgorithm.RS256);
	
	public String generateJwt(Map<String, Object> claims) {
		final String jwt = Jwts.builder().setClaims(claims).signWith(key.getPrivate()).compact();
		RSAPublicKey publicKey = (RSAPublicKey) key.getPublic();
        RSAPrivateKey privateKey = (RSAPrivateKey) key.getPrivate();
        
        System.out.println("Public key:");
        System.out.println(getPem(publicKey));
        
        System.out.println("Private key:");
        System.out.println(getPem(privateKey));
		return jwt;
	}

	public Map<String, Object> parseJwt(String token) {
		return Jwts.parserBuilder().setSigningKey(key.getPublic()).build().parseClaimsJws(token).getBody();
	}

	private String getPem(Object key) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        OutputStreamWriter osw = new OutputStreamWriter(baos);
        try {
            if (key instanceof RSAPublicKey) {
                RSAPublicKey publicKey = (RSAPublicKey) key;
                osw.write("-----BEGIN PUBLIC KEY-----\n");
                osw.write(Base64.getEncoder().encodeToString(publicKey.getEncoded()));
                osw.write("\n-----END PUBLIC KEY-----");
            } else if (key instanceof RSAPrivateKey) {
                RSAPrivateKey privateKey = (RSAPrivateKey) key;
                osw.write("-----BEGIN PRIVATE KEY-----\n");
                osw.write(Base64.getEncoder().encodeToString(privateKey.getEncoded()));
                osw.write("\n-----END PRIVATE KEY-----");
            } else {
                throw new IllegalArgumentException("Key type not supported: " + key.getClass().getSimpleName());
            }
            osw.flush();
            return new String(baos.toByteArray());
        } catch (IOException e) {
            throw new RuntimeException("Failed to get PEM string for key", e);
        }
    }
	
}

V2
@Component
public class JwtUtil {
	
	private final KeyPair key;
	
	public JwtUtil(@Value("${private.key}") String privateKey, @Value("${public.key}") String publicKey) {
		// Decode private and public key from Base64 encoded string
		byte[] decodedPrivateKeyBytes = Base64.getDecoder().decode(privateKey.getBytes(StandardCharsets.UTF_8));
		byte[] decodedPublicKeyBytes = Base64.getDecoder().decode(publicKey.getBytes(StandardCharsets.UTF_8));
		try {
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PrivateKey decodedPrivateKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(decodedPrivateKeyBytes));
			PublicKey decodedPublicKey = keyFactory.generatePublic(new X509EncodedKeySpec(decodedPublicKeyBytes));
			this.key = new KeyPair(decodedPublicKey, decodedPrivateKey);
		} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
			throw new RuntimeException("Error decoding keys", e);
		}
	}
	
	
	public String generateJwt(Map<String, Object> claims) {
		final String jwt = Jwts.builder().setClaims(claims).signWith(key.getPrivate()).compact();
		return jwt;
	}

	public Map<String, Object> parseJwt(String token) {
		return Jwts.parserBuilder().setSigningKey(key.getPublic()).build().parseClaimsJws(token).getBody();
	}

}